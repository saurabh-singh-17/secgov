/*Successfully converted to SAS Server Format*/
*processbody;
%let completedTXTPath =  &inter_output_path/MODELING_OUTLIER_DETECTION_COMPLETED.txt;
options mprint mlogic symbolgen mfile ;
dm log 'clear';
/*%sysexec del "&inter_output_path./MODELING_OUTLIER_DETECTION_COMPLETED.txt";*/
/**/
proc printto log="&inter_output_path./ModelingOutlierDetection_Log.log";
run;
quit;

/*proc printto print="&inter_output_path./ModelingOutlierDetection.out";*/


libname in "&input_path";
libname out "&inter_output_path";

/*put-in primary key*/
data in.dataworking;
	set in.dataworking;
	primary_key_1644 = _n_;
	run;

/*subset the input dataset*/
data out.temp;
	set in.dataworking (keep = &dependent_var &independent_var);
	run;

proc contents data=out.temp(keep=&independent_var.) out=cont;
run;

/*find total no. of obs*/
data _null_;
	set out.temp nobs = num_obs;
	call symputx("num_obs",num_obs);
	stop;
	run;
%let str_vars=;
proc sql;
	select name into :str_vars separated by " " from cont where type = 2 ;
	quit;
proc sql;
	select name into :num_vars separated by " " from cont where type = 1;
	quit;
%put a&str_vars.b;
%put &num_vars.;
%macro glm;
/*regression*/
proc glm data = out.temp;
	%if "&str_vars." ^="" %then %do;
		class &str_vars.;
	%end;
	model &dependent_var. = &num_vars.;
	output out = out.outdata r = res rstudent = r_student h = hat_diag cookd = cooks_dis dffits = dffits;
run;
quit;	
%mend glm;
%glm;
/*replace negative values by absolute values*/
data out.outdata;
	set out.outdata;
	attrib _all_ label=" ";

	format res r_student hat_diag cooks_dis dffits mape 8.3;
	res = abs(res);
	r_student = abs(r_student);
	hat_diag = abs(hat_diag); 
	cooks_dis = abs(cooks_dis);
	dffits = abs(dffits); 
	mape = res/&dependent_var.; 
	run;


%MACRO outlier_procGLM;

	%let univ_macro = r_student hat_diag cooks_dis dffits;;

	%let i =1;
	%do %until(not %length(%scan(&univ_macro,&i)));

	/*univariate treatment per variable*/
		proc univariate data = out.outdata noprint;
			var %scan(&univ_macro,&i);
			output out= univ&i.
				pctlpts= 0 to 100 by 1
				pctlpre=p_ ;
			run;

		data univ&i.;
			retain attributes;
			set univ&i.;
			attrib _all_ label=" ";

			format attributes $50.;
			attributes = "%scan(&univ_macro,&i)";
			run;

		%let i=%eval(&i+1);
	%end;

	/*merge univariate output for all the four variables*/
	data univ;
		set univ1 univ2 univ3 univ4;
		run;

	/*transpose the univariate output*/
	proc transpose data = univ out = trans_univ;
		id attributes;
		run;


	/*find values corresponding residual values per variable at each percentile point*/
	%let j =1;
	%do %until(not %length(%scan(&univ_macro,&j)));

		data out_part;
			set out.outdata (keep = res mape %scan(&univ_macro,&j));
			run;

		proc sort data=trans_univ;
			by %scan(&univ_macro,&j);
			run;
		proc sql;
				select (%scan(&univ_macro,&j)) into :pctl_vals separated by " " from Trans_univ;
				quit;
			%put &pctl_vals;

	
		data _null_;
			%let k = 1;
			%do %until (%eval(&k.) > 101);
				call symputx("pctl&k.", "%scan(&pctl_vals,&k, ' ')");
				%let k = %eval(&k.+1);
			%end;
			run;
		

		data binned;
			format perc $30.;
			set out_part;
				%do i = 1 %to 100;
					%let l = %eval(&i. +1);
					
					%if &i = 1 %then %do;
							if &&pctl&i <= %scan(&univ_macro,&j) < &&pctl&l. then perc = "p_%eval(&i.-1)";
					%end;
				%else %do;
						if &&pctl&i <= %scan(&univ_macro,&j) <= &&pctl&l. then perc = "p_%eval(&i.-1)";
					%end;
				%end;
			run;

		proc sql;
			create table binned1 as 
			select avg(mape) as mape_%scan(&univ_macro,&j), avg(res) as res_%scan(&univ_macro,&j), perc as _NAME_ length 8 from binned group by perc;
			quit;


		proc sort data=trans_univ;
			by _NAME_;
			run;
		proc sort data=binned1;
			by _NAME_;
			run;
		data trans_univ;
				merge trans_univ(in=a) binned1(in=b);
				by _NAME_ ;
				if a;
				run;


		%let j=%eval(&j+1);
	%end;


%MEND outlier_procGLM;
%outlier_procGLM;


/*reform the output dataset by putting in the no. of outliers and percent outliers*/
data out.output (drop = primary_key_1644);
	set trans_univ;
	
	format no_of_outliers 8.;
	primary_key_1644 = _n_;
	percent_outliers = 100-(primary_key_1644 - 1);
	no_of_outliers = (percent_outliers/100)*&num_obs.;
	
	run;
	

/*CSV export*/
proc export data = out.output
	outfile="&inter_output_path/modeling_outlierDetection.csv" 
	dbms=CSV replace; 
	run;

/*delete datasets from output folder*/
proc datasets library = out;
	delete output temp;
	run;


/* flex uses this file to test if the code has finished running */
data _null_;
	v1= "MODELING_OUTLIER_DETECTION_COMPLETED";
	file "&inter_output_path/MODELING_OUTLIER_DETECTION_COMPLETED.txt";
	put v1;
	run;


/*ENDSAS;*/




#params required
# inputPath       <- "C:/Users/Anvita.srivastava/MRx/r/CheckGLM-14-Aug-2014-11-15-37/2"
# outputPath      <- "C:/Users/Anvita.srivastava/MRx/r/CheckGLM-14-Aug-2014-11-15-37/2/0/1_1_1/text mining/frequency analysis"
# n_grp           <- 0
# c_grp_flag      <- "1_1_1"
# c_var_in        <- "Verbatim"
# c_var_in_used   <- c()
# n_char_b4split  <- 0
# n_char_a4split  <- 0
# sc_delimiter    <- ", . : space ; @ ? ! $ # )"
# c_Custom        <- "you ea with"
# index           <- 20
# c_var_new       <- "new_var"
# c_datasetName   <- "New_dataset"



c_all_vars        <- unique(c(c_var_in_used,c_var_in))
flag              <- 0
c_error           <- paste(outputPath,"/error.txt",sep="")

file.remove(c_error)

library(tau)
library(stringi)

#==================================================================================
# loading/reading the csv file 
#================================================================================== 

load(file=paste(inputPath, "/", "dataworking.RData", sep=""))

#changing the encoding of data for further processing
index_true<-which(is.locale(as.character(dataworking[,c_var_in])) == "FALSE")
if(length(index_true))
{
  dataworking[index_true,c_var_in]<-iconv(as.character(dataworking[index_true,c_var_in]),from="latin1" ,to = "UTF-8")
}


#dataworking <- read.csv(file=paste(inputPath, "/", "dataworking.csv", sep="")
 #                       ,stringsAsFactors=F)
  

c_var_grp         <- paste("grp", n_grp, "_flag", sep="")

if(n_grp) {
  subset          <- dataworking[, c_var_grp] == c_grp_flag
}


if(index && index<nrow(dataworking))
{
  dataworking     <- dataworking[c(1:index),]
}

#=================================================================================
#subsetting the data for required panel
#=================================================================================

data              <- subset(x=dataworking, select=c_all_vars)


if(!n_char_b4split)
{
  data_toSplit    <- subset(x=data,select=c_all_vars) 
}

if (n_char_b4split)
{  
  #===============================================================================     
  # subseting observations with length >= n_char_b4split
  #===============================================================================     
  data_toSplit    <- as.data.frame(data[which(nchar(as.character(data[,c_var_in]))>=
                                             n_char_b4split),c_all_vars])
  colnames(data_toSplit) <- c_all_vars
}


if( nrow(data_toSplit) == 0){
  
  write("There are no observations with length greater than the minimum length to split"
        , file=c_error)
  stop("There are no observations with length greater than the minimum length to split")
} 

temp_data<-tolower(x=data_toSplit[,c_var_in])

if(c_Custom!="")
{
  c_Custom_final      <- paste(" ",gsub(pattern=" ",replacement=" | ",x=c_Custom)," ",sep="")
  #c_Custom_final     <- unlist(strsplit(c_Custom,split=" "))
  temp_data           <- strsplit(x=as.character(temp_data),split=c_Custom_final)
  len_toRepeat        <- sapply(temp_data, length)
  len_toRepeat        <- as.integer(len_toRepeat)
  len_toRepeat        <- as.vector(len_toRepeat)
  
  volatile            <- as.data.frame(apply(X=data_toSplit,2,function(x) rep(x,len_toRepeat)))
  temporary           <- cbind(volatile,unlist(temp_data))
  colnames(temporary) <- c(c_all_vars,c_var_new)
  temp_data           <- temporary[,c_var_new]
}


#================================================================================== 
# making a regex for using it in strsplit function later
#   : it is of the form +[special_characters  ]+
#==================================================================================
if(sc_delimiter!= "")
{
  sc_delimiter        <- gsub(pattern=" ",replacement="",x=sc_delimiter)
  sc_delimiter        <- gsub(pattern="space",replacement=" ",x=sc_delimiter)
  regex               <- paste("+","[",sc_delimiter,"]","+",sep="")
  
  #===============================================================================  
  #doing observation split
  #===============================================================================
  var_fin             <- strsplit(x=as.character(temp_data),split=regex)
  temp                <- sapply(var_fin, length)
  new                 <- as.integer(temp)
  new                 <- as.vector(new)
  temp_data           <- unlist(var_fin)
}
if(sc_delimiter == "")
{
  new                 <- 1
}

#===================================================================================
#creating a flag to differentiate between observations with len< len after split and
# the rest
#==================================================================================

row_nums              <- which(nchar(as.character(temp_data)) <
                         n_char_a4split)
data_preview          <- as.data.frame(temp_data)

data_preview [row_nums,"flag"] <- 1

if(c_Custom!="")
{
  data_temp           <- apply(X=temporary[c_all_vars],2,function(x) rep(x,new))
}
if(c_Custom=="")
{
  data_temp           <- apply(X=data_toSplit[c_all_vars],2,function(x) rep(x,new))
}

data_preview          <- as.data.frame(cbind(data_temp,data_preview))

colnames(data_preview) <- c(c_all_vars,c_var_new,"flag")

#=======================================================================
#outputing data for preview
#=======================================================================
#write.csv( data_preview, paste(outputPath, "/data_preview.csv", sep=""),
#           row.names=F, quote=F)
#=======================================================================

if (n_char_a4split)
{
  t                     <- data_preview
  subset                <- t[,"flag"]=="NA"
  subset[is.na(subset)] <-TRUE
  data_preview          <- subset(x=t,subset=subset)
  if( nrow(data_preview) == 0)
  {
    write("There are no observations with length greater than the minimum length after split"
          , file=c_error)
    stop("There are no observations with length greater than the minimum length after split")
  }
  
}  

data_final             <- subset(x=data_preview,select=c(c_all_vars,c_var_new))

write.csv( data_final, paste(outputPath, "/",c_datasetName,".csv", sep=""),
             row.names=F, quote=F,append=F)

#==================================================================================
# completed txt
#==================================================================================
write("Observation Split completed", file=paste(outputPath, "/", "OBS_SPLIT_COMPLETED.txt", sep=""))
#==================================================================================
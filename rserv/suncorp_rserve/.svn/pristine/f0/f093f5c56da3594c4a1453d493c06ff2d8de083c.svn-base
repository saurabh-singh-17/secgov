#------------------------------------------------------------------------------------------------------#
#--                                                                                                  --#   
#-- Project Name :  MRx_Date_Manipulation_1.0                                                        --#
#-- Description  :  Contains some functions to enable Date Manipulation in MRx                       --#
#-- Return type  :  Creates CSV's at a location according to given inputs                            --#
#-- Author       :  Proma Majumdar                                                                   --#                 
#------------------------------------------------------------------------------------------------------#

#Parameters required
#-----------------------------------------------------------------
# input_path="C:\\MRx\\datevariable-11-Sep-2012-18-48-37\\1"
# output_path="C:\\MRx\\datevariable-11-Sep-2012-18-48-37\\1\\NewVariable\\DateManipulation\\5"
# dataset_name="dataworking"
# pref="ad"
# univariate="true"
# univ_datevars=c("Date" , "Date1")
# univ_func="increment"
# inc_dec_value="2"
# bivariate="true"
# bi_x_datevars=c("Date" , "Date1")
# bi_func="addition"
# bi_y_datevars="ACV"
# bi_y_type="numeric"

#Libraries required
#-----------------------------------------------------------------
# writing a function to recognise  a date format
dateformat<-function(date){
  form<-NULL
  temp<-as.character(date[1])
  if(any(grepl("[[:alpha:]]",date) == "TRUE"))
  {
    return("unknown")
  }
  if(grepl(" ",temp)){
    date<-apply(as.data.frame(date),1,function(x){strsplit(as.character(x)," ")[[1]][1]})
  }
  date<-as.character(date)
  if (is.null(date))
    return("unknown")  
  if(is.na(mean(as.numeric(date),na.rm=T)) == "FALSE")
  {
    return("unknown")
  }
  if((length(which(is.na(as.numeric(gsub("/","",date,fixed=T))) == TRUE)) > length(which(is.na(as.numeric(gsub("/","",date,fixed=T))) == FALSE)))   &
       (length(which(is.na(as.numeric(gsub("-","",date,fixed=T))) == TRUE)) > length(which(is.na(as.numeric(gsub("-","",date,fixed=T))) == FALSE))))
    return("unknown")
  if (all(is.na(date))) 
    return(NA)
  val<-length(date)
  if(val > 100){val= 100}
  date[which(date=='')] <- NA
  if(!is.na(as.numeric(substr(date[1],1,4)))){
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],5,5)
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[3,]))),na.rm=T)
    if(max1 > 12 & max2 <= 12){form<-paste("%Y",split,"%d",split,"%m",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%Y",split,"%m",split,"%d",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%Y",split,"%m",split,"%d",sep="")}
  }else{
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],6-(10-nchar(date[1])),6-(10-nchar(date[1])))
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[1,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    if(max1 > 12 && max2 <= 12){form<-paste("%d",split,"%m",split,"%Y",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%m",split,"%d",split,"%Y",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%m",split,"%d",split,"%Y",sep="")}
  }
  if(max(nchar(date)) <= 8)
  {
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],nchar(date[1])-2,nchar(date[1])-2)
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[1,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    if(max1 > 12 && max2 <= 12){form<-paste("%d",split,"%m",split,"%y",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%m",split,"%d",split,"%y",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%m",split,"%d",split,"%y",sep="")}
  }
  if(nchar(temp[1]) > 10 & nchar(temp[1]) <= 16){form<- paste(form," %H:%M",sep="")}
  if(nchar(temp[1]) > 16){form<- paste(form," %H:%M:%S",sep="")}
  return(form)
}

#Reading the dataworking.csv  
#----------------------------------------------------------------
# dataworking=read.csv(paste(input_path,"/dataworking.csv",sep=""),header=T)
load(paste(input_path,"/dataworking.RData",sep=""))

#Two function definations to enable Date Manipulation in MRx 
#-----------------------------------------------------------------
#Function to perform univariate Date manipulations
#parameter 1 : univ_datevars contains a list of 1 or more selected Date variable
#parameter 2 : univ_func contains the operation (increment or decrement)
#parameter 3 : inc_dec_value is the amount by which increment/decrement has to be done
date_univariate=function(univ_datevars, univ_func, inc_dec_value){
  
  date_column=which(colnames(dataworking) %in% univ_datevars)
  column_names=colnames(dataworking)
  result=NULL
  
  for(i in 1:length(date_column)){
    form<-dateformat(na.omit(as.character(dataworking[,date_column[i]])))
    if(univ_func == "increment"){
      add_datavar = as.character(format(as.Date(as.numeric(as.Date(dataworking[,date_column[i]],format=form)) + as.numeric(inc_dec_value[1]),origin="1970-01-01"),format=form))
    }
    if(univ_func == "decrement"){
      add_datavar = as.character(format(as.Date(as.numeric(as.Date(dataworking[,date_column[i]],format=form)) - as.numeric(inc_dec_value[1]),origin="1970-01-01"),format=form))
    }
    result=cbind(result,add_datavar)
    
  }
  result=as.data.frame(result)
  colnames(result) = paste(pref,
                           substr(univ_datevars,1,18),
                           substring(univ_func,1,4),
                           inc_dec_value,
                           sep="_")
  return(result)
}

#Function to perform bivariate Date manipulations
#parameter 1 : bi_x_datevars contains a list of 1 or more selected Date variable
#parameter 2 : bi_y_datevars contains the 2nd operand
#parameter 3 : bi_func is the operation(addition/subtraction) to be done
#parameter 3 : bi_y_type is the amount by which the operation(addition/subtraction) has to be done
date_bivariate=function(bi_x_datevars, bi_y_datevars, bi_func, bi_y_type)
{ 
  bivar_columns=which(colnames(dataworking) %in% bi_x_datevars)
  bi_selectedvar=which(colnames(dataworking) %in% bi_y_datevars)
  
  #result<-as.data.frame(rep(0,nrow(dataworking)))
  
  result<-NULL
  
  yVar=dataworking[,bi_y_datevars]
  
  if(class(yVar)=="factor" || class(yVar)=="character")
  { formy<-dateformat(na.omit(as.character(yVar)))
    yVar= as.Date(yVar,format=formy)
  }
  
  for(i in 1:length(bivar_columns)){
    formx<-dateformat(na.omit(as.character(dataworking[,bi_x_datevars[i]])))
    xVar=dataworking[,bi_x_datevars[i]]
    
    if(class(xVar)=="factor" || class(xVar)=="character")
    {
      temp= as.Date(xVar,format=formx)
      if(is.na(unique(temp))==TRUE)
      {
        temp=as.Date(xVar,format=formx)
      }
      xVar=temp
    }
    
    if(bi_func == "addition")
    {
      newVar=xVar + yVar      
    }
    if(bi_func == "subtraction")
    {
      newVar = xVar - yVar
    }
    
    if(class(newVar)=="Date")
    { formnewVar<-dateformat(na.omit(as.character(newVar)))
      newVar=strftime(as.Date(newVar,format=formnewVar),format=formx)
      newVar=as.character(newVar)
      #newVar= as.character(newVar)
    }
    result=cbind(result,newVar)
    colnames(result)[ncol(result)]=paste(pref,
                                         substr(bi_x_datevars[i],1,10),
                                         substring(bi_func,1,3),
                                         substring(bi_y_datevars,1,9),
                                         sep="_")
  }
  result=as.data.frame(result)
  #  write.csv(result,paste("E:\\ACV",i,".csv",sep=""),row.names=F)
}
resultDF=NULL
if(univariate == "true")
{
  resultDF=as.data.frame(date_univariate(univ_datevars, univ_func, inc_dec_value))
}
if(bivariate=="true")
{
  resultDF=cbind(resultDF ,as.matrix(date_bivariate(bi_x_datevars, bi_y_datevars, bi_func, bi_y_type)))
}

for (i in 1:ncol(resultDF)) {
  resultDF[, i] <- as.character(resultDF[, i])
}
dataworking=cbind.data.frame(dataworking,resultDF,stringsAsFactors=FALSE)

#-------------------------------------------------------------------------------
# 6000 check
#-------------------------------------------------------------------------------
if (nrow(resultDF) > 6000) {
  x_temp                       <- sample(x=nrow(resultDF),
                                         size=6000,
                                         replace=FALSE)
  resultDF                     <- resultDF[x_temp, , drop=FALSE]
}
#-------------------------------------------------------------------------------

#output csv containing the new Date variables
write.csv(resultDF,paste(output_path,"/new_Datevars.csv",sep=""),quote=FALSE,row.names=FALSE)

#merging the new variables created to the main dataset
write.csv(dataworking,paste(input_path,"/dataworking.csv",sep=""),quote=FALSE,row.names=FALSE)
save(dataworking,file=paste(input_path,"/dataworking.RData",sep=""))

#-------------------------------------------------------------------------------
# update the dataset properties
#-------------------------------------------------------------------------------
source(paste(genericCode_path,"datasetprop_update.R",sep="/"))
#-------------------------------------------------------------------------------

#writing the completed text at the output location
write("DATE_MANIPULAION_COMPLETED", file = paste(output_path,"/DATE_MANIPULATION_COMPLETED.txt", sep=""))

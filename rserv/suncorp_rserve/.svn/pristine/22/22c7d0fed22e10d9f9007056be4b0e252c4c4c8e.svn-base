#-------------------------------------------------------------------------------
# comments
#-------------------------------------------------------------------------------
# define size/ncol/nobs/variables OfTheDataset
#-------------------------------------------------------------------------------



#-------------------------------------------------------------------------------
# parameters needed
#-------------------------------------------------------------------------------
# /../<dataset>/param_datasetProperties.R
# c_path_in                      : path of input dataset to be added
# c_path_out                     : path of the output from this code
# c_data                         : name of input dataset to be added
# c_extension                    : extension of input dataset to be added
#-------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# parameters required
#------------------------------------------------------------------------------
# c_path_in                      : <string>
# c_path_out                     : /../<dataset>
# c_data                         : <string>
# c_extension                    : <file_extension>

# c_path_in                      <- c("D:/data")
# c_path_out                     <- c("D:/temp")
# c_data                         <- c("dataworking")
# c_extension                    <- c("csv")

c_path_in                      <- input_path
c_path_out                     <- output_path
c_data                         <- dataset_name
c_extension                    <- c("csv")
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# parameter play
#------------------------------------------------------------------------------
c_path_file_in_data              <- paste(c_path_in,
                                          "/",
                                          c_data,
                                          ".",
                                          c_extension,
                                          sep="")
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Read the data depending on the file extension
#------------------------------------------------------------------------------
switch(tolower(c_extension),
       tsv = {
         dataworking             <- read.table(file=c_path_file_in_data,
                                               header=TRUE,
                                               sep="\t",
                                               check.names=TRUE,
                                               fill=TRUE,
                                               stringsAsFactors=FALSE)
       },
       csv = {
         dataworking             <- read.csv(file=c_path_file_in_data,
                                             header=TRUE,
                                             stringsAsFactors=FALSE)
       },
       rdata = {
         currentname             <- load(c_path_file_in_data)
         load(c_path_file_in_data)
         eval(parse(text=paste("dataworking <-", currentname)))
         if(currentname != "dataworking") {
           eval(parse(text=paste("rm(",currentname,")",sep="")))
         }
       })
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Keep only alphanumeric characters and _ in the column names
#------------------------------------------------------------------------------
colnames(dataworking)            <- gsub(pattern="[^[:alnum:]_]",
                                         replacement="_",
                                         x=colnames(dataworking),
                                         ignore.case=TRUE)
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Creating a dataset with dataset properties
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------



#===========================Project Header=============================
#Process Name: Category
#Description:  categorises all variables based on the type
#Return type: variable categorization value csv
# Author : 
# date : 06- August 2012
#Version : Version1
#revised by: saurabh vikash singh
#=======================================================================

# writing a function to recognise  a date format
dateformat<-function(date){
  index<-(which(date==""))
  if (length(index)!=0){
    date<-date[-index]
  }
  form<-"unknown"
  temp<-as.character(date[1])
  if(any(grepl("[[:alpha:]]",date) == "TRUE"))
  {
    return("unknown")
  }
  if(grepl(" ",temp)){
    date<-apply(as.data.frame(date),1,function(x){strsplit(as.character(x)," ")[[1]][1]})
  }
  date<-as.character(date)
  if (is.null(date))
    return("unknown")  
  if(is.na(mean(as.numeric(date),na.rm=T)) == "FALSE")
  {
    return("unknown")
  }
  if((length(which(is.na(as.numeric(gsub("/","",date,fixed=T))) == TRUE)) > length(which(is.na(as.numeric(gsub("/","",date,fixed=T))) == FALSE)))   &
       (length(which(is.na(as.numeric(gsub("-","",date,fixed=T))) == TRUE)) > length(which(is.na(as.numeric(gsub("-","",date,fixed=T))) == FALSE))))
    return("unknown")
  if (all(is.na(date))) 
    return(NA)
  val<-length(date)
  if(val > 100){val= 100}
  date[which(date=='')] <- NA
  if(!is.na(as.numeric(substr(date[1],1,4)))){
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],5,5)
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[3,]))),na.rm=T)
    if(max1 > 12 & max2 <= 12){form<-paste("%Y",split,"%d",split,"%m",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%Y",split,"%m",split,"%d",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%Y",split,"%m",split,"%d",sep="")}
  }else{
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],6-(10-nchar(date[1])),6-(10-nchar(date[1])))
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[1,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    if(max1 > 12 && max2 <= 12){form<-paste("%d",split,"%m",split,"%Y",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%m",split,"%d",split,"%Y",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%m",split,"%d",split,"%Y",sep="")}
  }
  if(max(nchar(date)) <= 8)
  {
    decide<-apply(as.data.frame(date[1:val]),1,function(x){unlist(strsplit(x,"[[:punct:]]"))})
    split<-substr(date[1],nchar(date[1])-2,nchar(date[1])-2)
    decide<-as.data.frame(decide)
    max1<-max(as.numeric(as.character(as.matrix(decide[1,]))),na.rm=T)
    max2<-max(as.numeric(as.character(as.matrix(decide[2,]))),na.rm=T)
    if(max1 > 12 && max2 <= 12){form<-paste("%d",split,"%m",split,"%y",sep="")}
    if(max1 <= 12 & max2 >= 12){form<-paste("%m",split,"%d",split,"%y",sep="")}
    if(max1 <= 12 & max2 <= 12){form<-paste("%m",split,"%d",split,"%y",sep="")}
  }
  if(nchar(temp[1]) > 10 & nchar(temp[1]) <= 16){form<- paste(form," %H:%M",sep="")}
  if(nchar(temp[1]) > 16){form<- paste(form," %H:%M:%S",sep="")}
  return(form)
}
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Getting the class of all variables
# Separating them into numeric, string & date 
#------------------------------------------------------------------------------
c_numeric_string                 <- as.character(sapply(dataworking,class))
c_numeric_string                 <- gsub(pattern="logical",
                                         replacement="numeric",
                                         x=c_numeric_string)
c_numeric_string                 <- gsub(pattern="integer",
                                         replacement="numeric",
                                         x=c_numeric_string)
c_numeric_string                 <- gsub(pattern="factor",
                                         replacement="string",
                                         x=c_numeric_string)
c_numeric_string                 <- gsub(pattern="character",
                                         replacement="string",
                                         x=c_numeric_string)

n_index_string                   <- which(c_numeric_string == "string")
if (length(n_index_string)) {
  x_temp                         <- dataworking[, n_index_string, drop=FALSE]
  x_temp                         <- apply(as.matrix(x_temp),2,dateformat)
  x_temp                         <- as.data.frame(x_temp)
  n_index_date                   <- which(x_temp != "unknown")
  if (length(n_index_date)) {
    n_index_date                   <- n_index_string[n_index_date]
    c_numeric_string[n_index_date] <- "date"
  }
}
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Getting the length of all the variable names in the dataset
#------------------------------------------------------------------------------
var_len                          <- sapply(names(dataworking), nchar)
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Categorical/Continuous
#------------------------------------------------------------------------------
c_continuous_categorical         <- c_numeric_string
c_continuous_categorical         <- gsub(pattern="numeric",
                                         replacement="continuous",
                                         x=c_continuous_categorical)
c_continuous_categorical         <- gsub(pattern="date",
                                         replacement="continuous",
                                         x=c_continuous_categorical)
c_continuous_categorical         <- gsub(pattern="string",
                                         replacement="categorical",
                                         x=c_continuous_categorical)
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
# Create variable_categorization.csv
#------------------------------------------------------------------------------
df_var_cat                       <- data.frame(colnames(dataworking),
                                               c_continuous_categorical,
                                               0,
                                               c_numeric_string,
                                               0,
                                               "",
                                               stringsAsFactors=FALSE)
colnames(df_var_cat)             <- c("variable",
                                      "variable_type",
                                      "distinctvalues",
                                      "num_str",
                                      "var_len",
                                      "label")

write.csv(df_var_cat,
          paste(c_path_out,
                "/variable_categorization.csv",
                sep=""),
          row.names=FALSE,
          quote=FALSE)
#------------------------------------------------------------------------------


rows  <-nrow(dataworking)
cols <-ncol(dataworking)
#------------------------------------------------------------------------------
# Adding row numbers as a column with the name primary_key_1644
#------------------------------------------------------------------------------
dataworking$primary_key_1644     <- 1:nrow(dataworking)
#------------------------------------------------------------------------------


write.csv(dataworking,
     file=paste(c_path_out,
                "/dataworking.csv",
                sep=""),row.names=FALSE,quote=FALSE)
#------------------------------------------------------------------------------
# Saving the dataset as dataworking.RData
#------------------------------------------------------------------------------
save(dataworking,
     file=paste(c_path_out,
                "/dataworking.RData",
                sep=""))
#------------------------------------------------------------------------------


n_file_size                      <- file.info(paste(c_path_out,"/dataworking.RData",sep=""))$size
n_file_size                      <- round(x=n_file_size/1048576, digits=2)

dataset_properties               <- data.frame(file_name=c_data,
                                               no_of_obs=rows,
                                               no_of_vars=cols,
                                               file_size=n_file_size)
write.csv(dataset_properties,
          file=paste(c_path_out,
                     "/dataset_properties.csv",
                     sep=""),
          quote=FALSE,
          row.names=FALSE)
#------------------------------------------------------------------------------
# The completed.txt file
#------------------------------------------------------------------------------
write("variable categorization",
      file=paste(c_path_out,
                 "/categorical_gof_completed.txt",
                 sep=""))
#------------------------------------------------------------------------------

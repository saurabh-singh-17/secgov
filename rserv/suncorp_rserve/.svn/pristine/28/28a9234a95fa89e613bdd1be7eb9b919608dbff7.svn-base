#------------------------------------------------------------------------------------------------------#                                                                                                  --#   
#-- Process Name : MRx_General_Linear_Modeling.R                         
#-- Description  : Performs General Linear regression     
#-- Return type  : csv              
#-- Author : Proma majumdar and saurabh singh
#------------------------------------------------------------------------------------------------------#

#libraries Required.
#-------------------------------------------------------------------------------------

library(rgr)
library(car)
library(stringr)
library(vegan)
library(lsmeans)
library(Hmisc)
#reading the dataset-----------------------------------------------------------------------------------

if(is.null(independent_variables)){
  stop("Cannot build model with only class variables")
}

if(flag_bygrp_update == "true"){
  load(paste(group_path,"bygroupdata.RData",sep="/"))
  bygroup = bygroupdata
  rm("bygroupdata")
  load(paste(input_path,"dataworking.RData",sep="/"))
  datawork = dataworking
  rm("dataworking")
  dataworking<-merge(bygroup,datawork,all.x=TRUE,by="primary_key_1644")
  rm("bygroup")
  rm("datawork")
  col<-colnames(dataworking)
  newcol<-col[-c(which(grepl("\\.y",col)))]
  dataworking<-dataworking[newcol]
  newcol<-gsub("\\.x","",newcol)
  colnames(dataworking)<-newcol
  #   write.csv(dataworking,paste(group_path,"bygroupdata.csv",sep="/"))
  uniquecol<-unique(colnames(dataworking))
  dataworking<-dataworking[uniquecol]
}else{
if(model_iteration == 1){
  # dataworking<-read.csv(paste(input_path,"dataworking.csv",sep="/"))
  load(paste(input_path,"/dataworking.RData",sep=""))
}else{
  # dataworking<-read.csv(paste(group_path,"bygroupdata.csv",sep="/"))
  load(paste(group_path,"/bygroupdata.RData",sep=""))
  dataworking <- bygroupdata
  rm("bygroupdata")
}
}

#subset on treatment process---------------------------------------------------------------------------


if (as.integer(grp_no)!= 0)
{
  temp_var=paste("grp",grp_no,"_flag",sep="")
  
  index<-which(names(dataworking)==temp_var)
  dataworking<-subset(dataworking,dataworking[index]==grp_flag)
}  
dataworking$actual<-0
dataworking$actual<-dataworking[,dependent_variable]
bygroupdata <- dataworking
save(bygroupdata,file=paste(group_path,"/bygroupdata.RData",sep=""))
rm("bygroupdata")
#write.csv(dataworking,paste(group_path,"bygroupdata.csv",sep="/"),quote=FALSE,row.names=FALSE)
#subset on validation/validate model-------------------------------------------------------------------

if(validation_var != "")
{
  if (type_glm=="build")
  {
    col_num<-which(names(dataworking)==validation_var)
    dataworking<-dataworking[which(dataworking[col_num]==1),]
  }
  if (type_glm=="validation")
  {
    col_num<-which(names(dataworking)==validation_var)
    dataworking<-dataworking[c(which(dataworking[col_num]==0)),]
  }
}
#making numeric class variables as characters by adding level_ to include them as class variables in the model--------------------------------------------------------

if(length(class_variables)){
  for(lm in 1:length(class_variables))
  {
    if(class(dataworking[,class_variables[lm]]) == "integer" || class(dataworking[,class_variables[lm]]) == "numeric"){
      dataworking[,class_variables[lm]]<-paste("level_",dataworking[,class_variables[lm]],sep="")
      dataworking[,class_variables[lm]]<-as.factor(dataworking[,class_variables[lm]])
    }
  }
}
# 
#outlier_scenario--------------------------------------------------------------------------------------
if(length(outlier_var) != 0)
{
  col_num<-which(names(dataworking)==outlier_var)
  dataworking<-dataworking[which(dataworking[col_num]==1),]
}

if(length(class_variables)){
   independent_variables1<-c(independent_variables,class_variables)
   independent_variables1<-unique(independent_variables1)
 }else{
   independent_variables1=independent_variables
}
if(any(apply(as.data.frame(independent_variables),1,function(x){grepl("*",x,fixed=T)})) != T)
{
data<-dataworking[c(dependent_variable,independent_variables)]
}else{
  data<-dataworking[c(dependent_variable,unlist(strsplit(independent_variables,"*",fixed=T)))]
}
variable<-colnames(data)
if(length(which(is.na(data)==TRUE))){
  index<-which(is.na(data)==TRUE)%%nrow(data)
  if(length(which(index == 0))){index[c(which(index == 0))]=nrow(data)}
  data<-data[-c(index),]
  dataworking<-dataworking[-c(index),]
}
# datatest<-data[1,c(which(independent_variables %nin% class_variables) + 1)]
# removecol<-colnames(datatest)[which(apply(datatest,2,function(x){grepl("[[:punct:]]",x)}) == "TRUE")]
# if(length(removecol)){
#   independent_variables<-independent_variables[-c(which(independent_variables == removecol))]
# }


#------------------------------------------------------------------------------
# Delete these error TXTs if they already exist
#------------------------------------------------------------------------------
deleteThese <- paste(output_path,"/error.txt",sep="")
unlink(deleteThese,force=T)
#------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Check if there are any valid observations
#-------------------------------------------------------------------------------
if (!nrow(dataworking)) {
  char.error <- "Model cannot be run as there are no observations present to build a model due to the presence of missing values ."
  write(char.error, file=paste(output_path, "/error.txt", sep=""), append=T)
  stop(char.error, call.=T)
}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Checking if the class variables have more than one level
#-------------------------------------------------------------------------------
if(length(class_variables)){
  errorText <- NULL
  for(tempi in 1:length(class_variables)){
    if(length(unique(dataworking[,class_variables[tempi]])) == 1){
      errorText <- c(errorText,class_variables[tempi])
    }
  }
  if(length(errorText)){
    if(length(errorText) > 1){
      errorText <- paste(errorText,collapse=" , ")
      errorText <- gsub(pattern="(.*),",replacement="\\1and",x=errorText)
      errorText <- paste("The class variables ",errorText," have only 1 unique level. Regression will not run.",sep="")
    }else{
      errorText <- paste("The class variable ",errorText," has only 1 unique level. Regression will not run.",sep="")
    }
    write(errorText,file=paste(output_path,"/error.txt",sep=""))
    stop(errorText)
  }
}
#-------------------------------------------------------------------------------



#formula creation for model----------------------------------------------------------------------------

if(length(which(regression_options %in% 'noint'))!=0)
{
  formulaobj=paste(dependent_variable,"~",paste("0",paste(independent_variables1,collapse="+"),sep="+"))
}else{
  formulaobj=paste(dependent_variable,"~",paste(independent_variables1,collapse="+"))
}

#general linear model object---------------------------------------------------------------------------
glmobj <- glm(formulaobj,data=dataworking)
save(glmobj, file = paste(output_path,"/glmobj.RData", sep=""))

#Parameter_estimates-----------------------------------------------------------------------------------
if(flag_only_vif != 'true')
{
  param_est_add=NULL
  param_est <- as.data.frame(summary(glmobj)$coefficients)
  param_est<-cbind(row.names(param_est),param_est)
  #vari<-independent_variables[c(which(independent_variables %in% class_variables ==  "TRUE"))]
  #if(length(vari)!=0){
  #varest<-as.data.frame(param_est[c(which(grepl(vari,param_est[,1]) == "TRUE")),1])
  #for(i in 1:length(vari)){
  #levels<-gsub(vari[i],"",varest[,1],fixed=TRUE)
  #levelsindep<-unique(dataworking[,vari[i]])
  #varnotin<-levelsindep[which(levelsindep %nin% levels)]
  #param_est_add<-rbind(param_est_add,paste(vari[i],varnotin,sep=""))
  #}
  #if(grp_no == 0){
  # param_est_add <- cbind.data.frame(param_est_add , '0' ,'0' ,'0' ,'0') 
  #}else{
  # param_est_add <- cbind.data.frame(param_est_add , '0' ,'0' ,'0')
  #}
  #param_est <- as.data.frame(rbind(as.matrix(param_est),as.matrix(param_est_add)), row.names = "FALSE")
  #}
  colnames(param_est) <- c("Variable", "Estimate", "StdErr","tValue","PValue")
  param_est[,1]<-gsub(":","*",param_est[,1])
  write.csv(param_est,file=paste(output_path,"ParameterEstimates.csv",sep="/"),quote=FALSE,row.names=FALSE)
}
#ActualsVsPredicted-------------------------------------------------------------------------------------

actual<- as.data.frame(dataworking[dependent_variable],na.omit= TRUE)
residuals<- as.data.frame(round(glmobj$residuals,4))
predicted<- as.data.frame(round(glmobj$fitted.values,4))
leverage<- as.data.frame(influence(glmobj , do.coef = TRUE)[1])
dep_var<- actual
perc_err<- (abs(residuals)*100)/dep_var
std_err <- as.data.frame(0)
actvspred<-cbind.data.frame(actual,predicted,residuals,leverage,dep_var,perc_err)
actvspred <- cbind.data.frame(actvspred , std_err)
colnames(actvspred)<-c("actual","pred","resid","leverage" ,paste(dependent_variable), "perc_err" ,"std_error_resid")
actvspred <- actvspred[c(5,2,3,7,4,6,1)]
write.csv(actvspred,file=paste(output_path,"ActualvsPredicted.csv",sep="/"),quote=FALSE,row.names=FALSE)

#---------------------Model Statistics------------------------------------------------------------------
#---------------------MAPE--------------------------
if(flag_only_vif != 'true')
{
  calcMape = function(actual, predicted) 
  {    #Removing NA and zero values from the actual vector 
    
    index = (1:nrow(actual))[!is.na(actual)] 
    index = index[actual[index,1] != 0] 
    actual = actual[index,1] 
    predicted = predicted[index,1] 
    mape = mean(abs((actual - predicted)/actual))*100 
    return(mape) 
  }
  MAPE<-calcMape(actual,predicted)
  
  Number_of_Observations_Read <- nrow(dataworking)
  Number_of_Observations_Used <- nrow(dataworking)
  RSquare<-RsquareAdj(glmobj)$r.squared
  Adj_Rsquare<-RsquareAdj(glmobj)$adj.r.squared
  AIC<-glmobj$aic
  Dependent_Mean<-mean(dataworking[dependent_variable])
  a<-lm(formulaobj,data=dataworking)
  Root_MSE<-summary(a)$sigma
  Coeff_Var<-100*Root_MSE/Dependent_Mean
  Sum_of_Squares_Error<-summary(glmobj)$deviance
  Mean_Square_Error<-Sum_of_Squares_Error/summary(glmobj)$df[2]
  Sum_of_Squares<-sum(anova(glmobj)$Deviance,na.rm=TRUE)
  Mean_Square<-Sum_of_Squares/(nrow(anova(glmobj))-1)
  fdummy<-summary(a)$fstatistic
  Model_F_Statistic<-summary(a)$fstatistic[1]
  P_Value_Model<-pf(fdummy[1],fdummy[2],fdummy[3],lower.tail=FALSE)
  modelstats<-rbind(Number_of_Observations_Read, Number_of_Observations_Used,RSquare,Adj_Rsquare,AIC,Coeff_Var,Root_MSE,Dependent_Mean,Sum_of_Squares,Mean_Square,Model_F_Statistic,P_Value_Model,Sum_of_Squares_Error,Mean_Square_Error,MAPE)
  modelstats<-cbind(row.names(modelstats),modelstats)
  colnames(modelstats)<-c("Statistics","Value")
  modelstats <- as.data.frame(modelstats , row.names = "FALSE")
  modelstats[,1]<-as.character(modelstats[,1])
  modelstats[3,1]<-"R-Square"
  classvar = NULL
  classvar2 = NULL
  newadd=NULL
  newadd2=NULL
  if(length(class_variables) != 0){
  for(i in 1 : length(class_variables)){
    pastenew<-""
    class_name = paste(colnames(dataworking[class_variables[i]]) , "Levels" ,sep = " ")
    class_values = paste(colnames(dataworking[class_variables[i]]) , "Values" ,sep = " ")
    class_level  = nrow(unique(dataworking[class_variables[i]])) 
    names <-unique(dataworking[class_variables[i]])
    for(j in 1:nrow(names)){
      pastenew<-paste(pastenew,names[j,1],sep=" ")
    }
    class_info <-  cbind.data.frame(class_name , class_level )
    class_val <- cbind.data.frame(class_values , pastenew)
    classvar <- rbind(classvar , class_info)
    colnames(classvar) = c("Statistics" , "Value")
    classvar2 <- rbind(classvar2 , class_val)
    colnames(classvar2) = c("Statistics" , "Value")
    newadd<-rbind.data.frame(classvar , classvar2)
    newadd2<-rbind.data.frame(newadd2,newadd)
    classvar=NULL
    classvar2=NULL
    newadd=NULL
  }
  modelstats <- rbind.data.frame(newadd2 , modelstats)
  }
  write.csv(modelstats,file=paste(output_path,"Model_Statistics.csv",sep="/"),quote=FALSE,row.names=FALSE)
}
#model anova-------------------------------------------------------------------------------------------
#------------ type1--------------------------------------------------------------- 
if(length(which(is.na(coefficients(glmobj)))) == 0)
{
  if(length(independent_variables) != 1){ 
  vif<-vif(glmobj)
  vif <- as.data.frame(vif)
  }else{
  vif="NA"  
  vif <- as.data.frame(vif)
  }
}else{
      new<-summary(glmobj)$coefficients
      new<-as.data.frame(cbind(row.names(new),new))
      new<-new[1]
      new<-new[which(new[,1] %in% independent_variables),]
      
      if(length(class_variables)){
        classlvldata<-as.character(as.data.frame(unlist(glmobj$xlevels))[,1])
        for(gm in 1:length(class_variables)){
          for(mn in 1:length(classlvldata)){
            for(km in 1:length(new)){
              if (grepl(class_variables[gm],new[km]) && grepl(classlvldata[mn],new[km]))
              {
                new[km]<-gsub(classlvldata[mn],"",new[km])
              }
            }
          }
        }
        new<-unique(new)
      }
      independent_variables2<-as.character(new)
      #formula creation for model----------------------------------------------------------------------------
      
      if(length(which(regression_options %in% 'noint'))!=0)
      {
        formulaobj=paste(dependent_variable,"~",paste("0",paste(independent_variables2,collapse="+"),sep="+"))
      }else{
        formulaobj=paste(dependent_variable,"~",paste(independent_variables2,collapse="+"))
      }
      
      #general linear model object---------------------------------------------------------------------------
      glmobj2 <- glm(formulaobj,data=dataworking)
      vif<-vif(glmobj2)
      vif <- as.data.frame(vif)
      }
if(flag_only_vif=='true'){
  vif<-cbind.data.frame(row.names(vif),vif[,1])
  colnames(vif)<-c("Variable","VIF")
  vif<-vif[c(which(as.character(vif$Variable) %in% vif_variables)),]
  write.csv(vif,file=paste(output_path,"ModelAnova.csv",sep="/"),quote=FALSE,row.names=FALSE)
}else{
  type1stats = NULL
  type1stats<-as.data.frame(anova(glmobj,test="F"))
  type1stats <- type1stats[-c(3,4)]
  ms1 <- as.data.frame(type1stats$Deviance / type1stats$Df)
  colnames(ms1) <-"ms1"
  vif<-cbind.data.frame(row.names(vif),vif[,1])
  hypothesis1<-as.data.frame(rep(1,nrow(type1stats)))
  type1stats<-cbind(hypothesis1,row.names(type1stats),type1stats,ms1)
  type1stats<-merge(type1stats,vif,by.x="row.names(type1stats)",by.y="row.names(vif)",all.x=TRUE)
  colnames(type1stats)<-c("Variable","HypothesisType","DF","SS","FValue","PValue","MS","VIF")
  
  #--------------type3-------------------------------------------------------------
  type3stats = NULL
  type3stats<-Anova(glmobj, test="F")
  ms3 <- as.data.frame(type3stats$SS / type3stats$Df)
  colnames(ms3) <-"ms3"
  hypothesis3<-as.data.frame(rep(3,nrow(type3stats)))
  type3stats<-cbind(hypothesis3,row.names(type3stats),type3stats ,ms3)
  type3stats<-merge(type3stats,vif,by.x="row.names(type3stats)",by.y="row.names(vif)",all.x=TRUE)
  colnames(type3stats)<-c("Variable","HypothesisType","SS","DF","FValue","PValue","MS","VIF")
  modelanova = NULL
  modelanova <- rbind.data.frame(type1stats , type3stats)
  modelanova<-modelanova[c(order(modelanova$Variable)),]
  modelanova<-modelanova[-c(which(modelanova$Variable == "NULL" | modelanova$Variable == "Residuals")),]
  #modelanova <- cbind.data.frame(HypothesisType , Variable , DF , SS ,MS ,FValue ,PValue , VIF)
  modelanova<-modelanova[c(2,1,3,4,7,5,6,8)]
  write.csv(modelanova,file=paste(output_path,"ModelAnova.csv",sep="/"),quote=FALSE,row.names=FALSE)
}

#lsmeans-----------------------------------------------------------------------------------------------

if(length(ls_means_variables)!= 0){
  
  lstable<-NULL
  for(i in 1:length(ls_means_variables)){
    dataworking[,ls_means_variables[i]]<-as.factor(as.character(dataworking[,ls_means_variables[i]]))
    formulas<- paste("lsmeans(glmobj, pairwise ~ ",ls_means_variables[i],")",sep=" ")
    newlstable<-as.data.frame(eval(parse(text=formulas))[1])
    Variable<-rep(class_variables[i],nrow(newlstable))
    PValue <- rep("<.0001" ,nrow(newlstable))
    newlstable<-cbind(Variable,newlstable,PValue)
    newlstable <- newlstable[c(1,2,3,4,ncol(newlstable))]
    colnames(newlstable)<-c("Variable","Level","LSMean","StandardError","PValue")
    lstable<-rbind(lstable,newlstable)
    newlstable = NULL
  }
  write.csv(lstable,file=paste(output_path,"Lsmeans.csv",sep="/"),quote=FALSE,row.names=FALSE)
}
#saving the linear model object-------------------------------------------------------------------------
save(glmobj, file=paste(output_path,"/glmobjimage.R",sep=""))

write.table("GENERAL_LINEAR_MODEL_COMPLETED",paste(output_path,"GENERAL_LINEAR_MODEL_COMPLETED.txt",sep="/"),quote=F,row.names=F,col.names=F)